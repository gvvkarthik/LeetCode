

```md
# 🌳 Same Tree

## **📌 Problem Statement**  
Given the roots of two binary trees, `p` and `q`, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.

### **🔹 Example 1:**  
```python
Input: p = [1, 2, 3], q = [1, 2, 3]  
Output: true  
Explanation: The trees are identical:
        1           1
       / \         / \
      2   3       2   3
```

### **🔹 Example 2:**  
```python
Input: p = [1, 2], q = [1, null, 2]  
Output: false  
Explanation: The trees have different structures:
        1           1
       /           / \
      2           null  2
```

### **🔹 Example 3:**  
```python
Input: p = [1, 2, 1], q = [1, 1, 2]  
Output: false  
Explanation: The trees have different node values:
        1           1
       / \         / \
      2   1       1   2
```

---

## **🚀 Solution Approach**  
1. **Base Case 1**: If both trees are empty (i.e., `None`), they are the same.
2. **Base Case 2**: If one of the trees is empty while the other is not, they are not the same.
3. **Base Case 3**: If the values of the nodes at the current positions are different, the trees are not the same.
4. **Recursive Case**: Recursively check the left and right subtrees of both trees. Both subtrees must match for the trees to be identical.

---

## **📝 Python Code (Same Tree)**  
```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def isSameTree(self, p: TreeNode, q: TreeNode) -> bool:
        if not p and not q:
            return True
        if not p or not q:
            return False
        if p.val != q.val:
            return False
        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)
```

---

## **⏳ Time & Space Complexity**  
✅ **Time Complexity:** `O(N)`, where `N` is the number of nodes in the trees. We visit each node once.  
✅ **Space Complexity:** `O(H)`, where `H` is the height of the tree. This is due to the recursive call stack.

---

## **⭐ Follow for More**  
If you found this helpful, **⭐ star** the repo and follow me on GitHub! 🚀😊
```
