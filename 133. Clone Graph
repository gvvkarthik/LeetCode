
```md
# üßë‚Äçü§ù‚Äçüßë Clone Graph

## **üìå Problem Statement**  
Given a reference to a node in a connected undirected graph, return a deep copy (clone) of the graph.

Each node in the graph contains a value and a list of its neighbors. The deep copy should include all the nodes and edges of the original graph.

### **üîπ Example 1:**  
```python
Input: node = [[2,4],[1,3],[2,4],[1,3]]
Output: [[2,4],[1,3],[2,4],[1,3]]
Explanation: The graph is a simple undirected graph with 4 nodes, 
and the clone of the graph has the same structure.
```

### **üîπ Example 2:**  
```python
Input: node = [1]
Output: [1]
Explanation: The graph is just one node with no neighbors, and the clone has the same single node.
```

---

## **üöÄ Solution Approach**  
1. **Depth-First Search (DFS)**: We use DFS to traverse the graph and create a deep copy of each node and its neighbors.
2. **Hash Map (visited)**: A hash map (`visited`) is used to track the nodes that have already been cloned to avoid cycles or duplicate copies.
3. **Clone each node**: As we visit each node, we clone it and recursively clone its neighbors.

---

## **üìù Python Code (Clone Graph)**  
```python
class Node:
    def __init__(self, val=0, neighbors=None):
        self.val = val
        self.neighbors = neighbors if neighbors is not None else []

class Solution:
    def cloneGraph(self, node: 'Node') -> 'Node':
        if not node:
            return None

        visited = {}

        def dfs(curr):
            if curr in visited:
                return visited[curr]
            
            # Clone the current node
            clone = Node(curr.val)
            visited[curr] = clone

            # Clone the neighbors recursively
            for neighbor in curr.neighbors:
                clone.neighbors.append(dfs(neighbor))
            
            return clone

        return dfs(node)
```

---

## **‚è≥ Time & Space Complexity**  
‚úÖ **Time Complexity:** `O(N)`, where `N` is the number of nodes in the graph. Each node is visited once.  
‚úÖ **Space Complexity:** `O(N)`, for the visited hash map and the recursion stack during DFS.

---

## **‚≠ê Follow for More**  
If you found this helpful, **‚≠ê star** the repo and follow me on GitHub! üöÄüòä
```
