
```md
# 🌳 Maximum Depth of Binary Tree

## **📌 Problem Statement**  
Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

### **🔹 Example 1:**  
```python
Input: root = [3,9,20,null,null,15,7]  
Output: 3  
Explanation: The maximum depth is 3 because the longest path is [3, 20, 15].
```

### **🔹 Example 2:**  
```python
Input: root = [1,null,2]  
Output: 2  
Explanation: The maximum depth is 2 because the longest path is [1, 2].
```

### **🔹 Example 3:**  
```python
Input: root = []  
Output: 0  
Explanation: The tree is empty, so its depth is 0.
```

---

## **🚀 Solution Approach**  
1. **Base Case**: If the tree is empty (`root` is `None`), return `0` as the maximum depth.
2. **Recursive Case**: Compute the maximum depth of the left and right subtrees, and return the larger of the two depths, adding 1 to account for the current node.

The depth of a binary tree is determined by the longest path from the root to a leaf node. The function performs a depth-first search to determine this depth.

---

## **📝 Python Code (Maximum Depth of Binary Tree)**  
```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def maxDepth(self, root: TreeNode) -> int:
        if not root:
            return 0  # Base case: If tree is empty
        
        left_depth = self.maxDepth(root.left)
        right_depth = self.maxDepth(root.right)
        
        return max(left_depth, right_depth) + 1  # Add 1 for current node
```

---

## **⏳ Time & Space Complexity**  
✅ **Time Complexity:** `O(N)`, where `N` is the number of nodes in the tree. We visit each node once.  
✅ **Space Complexity:** `O(H)`, where `H` is the height of the tree. This is due to the recursive call stack.

---

## **⭐ Follow for More**  
If you found this helpful, **⭐ star** the repo and follow me on GitHub! 🚀😊
```
